trigger:
  batch: true
  branches:
    include:
      - master

pr: none

pool:
  vmImage: 'windows-2022'

variables:
  solution: '**/*.sln'
  buildPlatform: 'x86|x64|ARM64'
  buildConfiguration: 'Release'
  appxPackageDir: '$(build.artifactStagingDirectory)\AppxPackages\\'
  Major: '7'
  Minor: '9'

jobs:
  - job: BuildWindows
    displayName: 'Build Windows Release'
    
    steps:
      - task: UseDotNet@2
        displayName: 'Use preview .Net sdk'
        inputs:
          version: 7.x
          includePreviewVersions: true

      - task: DownloadSecureFile@1
        displayName: 'Download secure file'
        name: 'signingCert'
        inputs:
          secureFile: 'MoneyFoxCert_2021.pfx'

      - powershell: |
          $pfxpath = '$(signingCert.secureFilePath)'
          $certPassword = $env:CERT_PASSWORD_ENV
          
          Add-Type -AssemblyName System.Security
          $cert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2
          $cert.Import($pfxpath, $certPassword, [System.Security.Cryptography.X509Certificates.X509KeyStorageFlags]"PersistKeySet")
          $store = new-object system.security.cryptography.X509Certificates.X509Store -argumentlist "MY", CurrentUser
          $store.Open([System.Security.Cryptography.X509Certificates.OpenFlags]"ReadWrite")
          $store.Add($cert)
          $store.Close()
        displayName: 'Install Cert'
        env:
          CERT_PASSWORD_ENV: $(UWP_Certificate_Password)

      - task: PowerShell@2
        displayName: "Set AppManifest"
        inputs:
          targetType: 'inline'
          script: |
            [xml]$xmlDoc = Get-Content '$(Build.SourcesDirectory)\src\MoneyFox.Ui\Platforms\Windows\Package.appxmanifest'
            $xmlDoc.Package.Identity.Name="57598ApplySolutionsSoftwa.MoneyFox"
            $xmlDoc.Package.Identity.Publisher="CN=071307B1-B0E3-434A-AD0E-FFF714A7245C"
            $xmlDoc.Save('$(Build.SourcesDirectory)\src\MoneyFox.Ui\Platforms\Windows\Package.appxmanifest')
          failOnStderr: true

      - task: PowerShell@2
        displayName: "Set Store Association"
        inputs:
          targetType: 'inline'
          script: |
            [xml]$xmlDoc = Get-Content '$(Build.SourcesDirectory)\src\MoneyFox.Ui\Platforms\Windows\Package.StoreAssociation.xml'
            $xmlDoc.StoreAssociation.Publisher="CN=071307B1-B0E3-434A-AD0E-FFF714A7245C"
            $xmlDoc.StoreAssociation.ProductReservedInfo.MainPackageIdentityName="57598ApplySolutionsSoftwa.MoneyFox"
            $xmlDoc.Save('$(Build.SourcesDirectory)\src\MoneyFox.Ui\Platforms\Windows\Package.StoreAssociation.xml')
          failOnStderr: true

      - task: colinsalmcorner.colinsalmcorner-buildtasks.replace-tokens-task.ReplaceTokens@1
        displayName: 'Settings'
        inputs:
          sourcePath: Src/MoneyFox.Win/MoneyFox.Win
          filePattern: appsettings.json

      - task: VersionAPPX@2
        displayName: set version
        inputs:
          Path: '$(Build.SourcesDirectory)'
          VersionNumber: '$(Major).$(Minor).$(Build.BuildId)'
          InjectVersion: false
          VersionRegex: '\d+.\d+.\d+'
          OutputVersion: 'OutputedVersion'
    
      - task: PowerShell@2
        displayName: "install maui workload"
        inputs:
          targetType: 'inline'
          script: 'dotnet workload install maui'

      - task: DotNetCoreCLI@2
        displayName: publish msix
        inputs:
          command: 'publish'
          publishWebProjects: false
          projects: '**/MoneyFox.Ui.csproj'
          arguments: '-c Release -f:net7.0-windows10.0.22621.0'
          zipAfterPublish: false
          modifyOutputPath: false

      - task: DotNetCoreCLI@2
        displayName: 'Run Tests'
        inputs:
          command: 'test'
          projects: |
            **/MoneyFox.Core.Tests.csproj
            **/MoneyFox.Infrastructure.Tests.csproj
          arguments: '--configuration $(BuildConfiguration) --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover'

      - task: CopyFiles@2
        displayName: 'Copy coveragexml to staging'
        inputs:
          SourceFolder: '$(Agent.TempDirectory)'
          Contents: '**\*.opencover.xml'
          TargetFolder: '$(Build.ArtifactStagingDirectory)'
                
      - task: CopyFiles@2
        displayName: 'Copy Files to: $(build.artifactstagingdirectory)'
        inputs:
          SourceFolder: '$(System.DefaultWorkingDirectory)'
          Contents: '**/*.msix'
          TargetFolder: '$(System.DefaultWorkingDirectory)/AppPackages'
          flattenFolders: true

      - task: PowerShell@2
        displayName: "Set Store Association"
        inputs:
          targetType: 'inline'
          script: |
            'C:\Program Files (x86)\Windows Kits\10\bin\10.0.22621.0\x64\MakeAppx.exe' bundle /d $(System.DefaultWorkingDirectory)/AppPackages /p $(build.artifactstagingdirectory)/moneyfox.msixbundle
          failOnStderr: true

      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifact: drop'
