name: validate pr

on:
  pull_request:
    branches: [ "master" ]

  workflow_dispatch:

env:
    DOTNETVERSION: 6.0.400
    ANDROID_PROJECT_PATH: "src/MoneyFox.Android/MoneyFox.Android.csproj"
    IOS_PROJECT_PATH: "src/MoneyFox.Ios/MoneyFox.Ios.csproj"
    UI_PROJECT_PATH: "src/MoneyFox.Ui/MoneyFox.Ui.csproj"
    CORE_TEST_PROJECT_PATH: "src/MoneyFox.Tests/MoneyFox.Core.Tests.csproj"
    UI_TEST_PROJECT_PATH: "src/MoneyFox.Tests/MoneyFox.Ui.Tests.csproj"
    INFRASTRUCTURE_PROJECT_PATH: "src/MoneyFox.Infrastructure.Tests/MoneyFox.Infrastructure.Tests.csproj"

jobs:
  buildAndroid:

    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '${{env.DOTNETVERSION}}'

    - name: Install MAUI Workload

      run: |
        dotnet workload install android --ignore-failed-sources
        dotnet workload install maui --ignore-failed-sources

    - name: Restore Dependencies
      run: dotnet restore ${{env.ANDROID_PROJECT_PATH}}

    - name: Build MAUI Android
      run: dotnet publish ${{env.UI_PROJECT_PATH}} -f net6.0-android -c Release    
      
    - name: Test
      run: |
        dotnet test ${{env.UI_TEST_PROJECT_PATH}}
        dotnet test ${{env.CORE_TEST_PROJECT_PATH}}
        dotnet test ${{env.INFRASTRUCTURE_PROJECT_PATH}}

  buildiOS:

    runs-on: macos-12

    steps:
    - uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '${{env.DOTNETVERSION}}'

    - name: Install MAUI Workloads
      run: |
        dotnet workload install ios --ignore-failed-sources
        dotnet workload install maui --ignore-failed-sources

    - name: Restore Dependencies
      run: dotnet restore ${{env.IOS_PROJECT_PATH}}

    - name: Build MAUI iOS
      run: dotnet build ${{env.UI_PROJECT_PATH}} net6.0-ios c- Debug /p:buildForSimulator=True /p:packageApp=True /p:ArchiveOnBuild=False
      
    - name: Test
      run: |
        dotnet test ${{env.CORE_TEST_PROJECT_PATH}}
        dotnet test ${{env.INFRASTRUCTURE_PROJECT_PATH}}


  buildWindows:
    runs-on: windows-latest
    
    steps:
      - uses: actions/checkout@v2
      
      - name: Setup .NET SDK ${{env.DOTNETVERSION}}
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '${{env.DOTNETVERSION}}'
          
      - name: Install .NET MAUI
        run: |
          dotnet nuget locals all --clear
          dotnet workload install maui --source https://aka.ms/dotnet6/nuget/index.json --source https://api.nuget.org/v3/index.json
      
      # https://docs.microsoft.com/en-us/dotnet/maui/windows/deployment/overview
      - name: Build Windows MSIX
        run: dotnet publish ${{env.UI_PROJECT_PATH}}  -f net6.0-windows10.0.22000.0 -c Release 
          
#      - name: Build and Run UnitTests
#        run: |
#          dotnet build .\Src\MoneyFox.Tests\MoneyFox.Tests.csproj
#          dotnet test .\Src\MoneyFox.Tests\MoneyFox.Tests.csproj --no-build --verbosity normal

#      # https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/certutil
#      # commandline util to encode to base64 on windows
#      - name: Create signing pfx file from secrets
#        shell: pwsh
#        id: secret-file
#        env:
#          SECRET_DATA1: ${{ secrets.WIN_SIGN_CERT }}
#        run: |
#          $secretFile = "WinSignCert.pfx"; 
#          $encodedBytes = [System.Convert]::FromBase64String($env:SECRET_DATA1); 
#          Set-Content $secretFile -Value $encodedBytes -AsByteStream;
#          Write-Output "::set-output name=SECRET_FILE::$secretFile";
#          Write-Output " ";
#          Write-Output "CHECK FILE EXISTS";
#          Write-Output " ";
#          ls
#
#      # https://docs.microsoft.com/en-us/windows/msix/desktop/azure-dev-ops
#      - name: Sign Windows App
#        shell: pwsh
#        env:
#          CERT_PASSWORD: ${{ secrets.WIN_CERT_PASSWORD }}
#        run: |
#          '"C:\Program Files (x86)\Windows Kits\10\App Certification Kit\SignTool" sign /a /fd SHA256 /f WinSignCert.pfx /p ($env:CERT_PASSWORD) 6.0\Apps\WeatherTwentyOne\src\WeatherTwentyOne\bin\Release\net6.0-windows10.0.19041.0\win10-x64\AppPackages\WeatherTwentyOne_1.0.0.0_TestWeatherTwentyOne_1.0.0.0_x64.msix'
#
#      - uses: actions/upload-artifact@v2
#        with:
#          name: artifacts-windows
#          path: |
#            **\*.msix
#      